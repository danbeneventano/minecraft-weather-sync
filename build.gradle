import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'com.github.rodionmoiseev.gradle.plugins', name: 'idea-utils', version: '0.2'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "4.0.1"
    id "de.undercouch.download" version "3.4.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'idea-utils'

idea {
    project {
        ipr {
            withXml { xmlProvider ->
                def project = xmlProvider.asNode()
                def runConfigs = new XmlParser().parse(new File("config/intellij_runconfigs.xml"))
                project.append(runConfigs)
            }
        }
    }
}

repositories {
    jcenter()
    maven { url "https://hub.spigotmc.org/nexus/content/groups/public/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://nexus.wesjd.net/repository/thirdparty/" }
}

group = project.property("group")
version = project.property("version")
sourceCompatibility = project.property("sourceversion")

dependencies {
    compile group: 'org.spigotmc', name: 'spigot-api', version: project.property("apiversion")
    //compile group: 'org.spigotmc', name: 'spigot', version: '1.13-R0.1-SNAPSHOT'
    compile group: 'org.spigotmc', name: 'spigot-api', version: project.property("apiversion"), classifier: 'sources'
    compile group: 'tk.plogitech', name: 'darksky-forecast-api-jackson', version: '1.3.1'
    compile group: 'com.google.guava', name: 'guava', version: '27.0-jre'
    compile group: 'com.google.maps', name: 'google-maps-services', version: '0.9.0'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    compile group: 'net.wesjd', name: 'anvilgui', version: '1.2.1-SNAPSHOT'
    compile group: 'com.maxmind.geoip2', name: 'geoip2', version: '2.12.0'
}

processResources {
    filter ReplaceTokens, tokens: [
            "apiversion": project.property("apiversion"),
            "version"   : project.property("version")
    ]
}

clean {
    delete "final/"
    delete "testserver/"
}

compileJava.dependsOn {
    downloadSpigot
}

jar {
    actions = []
    dependsOn = []
    dependsOn('shadowJar')
}

shadowJar {
    dependencies {
        exclude(dependency('org.spigotmc:spigot-api:.*'))
        exclude(dependency('org.spigotmc:spigot:.*'))
        exclude(dependency('net.md-5:bungeecord-chat:.*'))
    }
    destinationDir = file("testserver/plugins")
}

task deploy(type: Copy, dependsOn: ['build']) {
    from "${buildDir}/libs"
    into "final/"
}

task setupDevServer(type: Copy) {
    from 'config/serverfiles'
    into 'testserver'
}

task prepareDevServer(dependsOn: ['downloadSpigot', 'setupDevServer', 'build']) {}

task startDevServer(dependsOn: [prepareDevServer], type: JavaExec) {
    classpath configurations.compile, configurations.runtime
    main = "org.bukkit.craftbukkit.Main"
    workingDir = "testserver/"
    standardInput = System.in
}

def testServerDir = new File("testserver/")

task downloadSpigot(type: Download) {
    if (hasSpigot()) {
        enabled = false
    }
    src project.property("spigoturl")
    dest new File(testServerDir, "server.jar")
}

def hasSpigot() {
    return new File("testserver/server.jar").exists()
}